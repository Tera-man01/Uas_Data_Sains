# -*- coding: utf-8 -*-
"""Heart_model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fyPtvM4AXcODIJd6G8XK10-e76PToBkR
"""

# ================================================
# Tahap 1: Pengumpulan Data dan Pra-pemrosesan
# Project: Prediksi Penyakit Jantung
# Dataset: Heart Disease UCI (upload manual / dari URL)
# ================================================

# 1. Import Library
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from google.colab import files

# 2. Upload File CSV (jika tidak pakai URL langsung)
uploaded = files.upload()

# 3. Baca dataset
# Ganti nama file sesuai hasil upload
df = pd.read_csv('heart_cleveland_upload (3) (1).csv')

# 4. Bersihkan nama kolom dari spasi
df.columns = df.columns.str.strip()

# 5. Cek bentuk dan 5 data awal
print("Jumlah baris dan kolom:", df.shape)
display(df.head())

# 6. Informasi data dan missing values
print("\n--- Informasi Dataset ---")
df.info()
print("\nJumlah missing value:\n", df.isnull().sum())

# 7. Statistik deskriptif
print("\n--- Statistik Deskriptif ---")
display(df.describe())

# 8. Cek nilai unik tiap kolom
print("\n--- Nilai Unik Tiap Kolom ---")
for col in df.columns:
    print(f"{col}: {df[col].unique()}")

# 9. Visualisasi Korelasi Antar Fitur
plt.figure(figsize=(12, 8))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Matriks Korelasi Fitur')
plt.show()

# 10. Visualisasi distribusi target
if 'target' in df.columns:
    sns.countplot(data=df, x='target')
    plt.title('Distribusi Target (1: Ada Penyakit, 0: Tidak)')
    plt.xlabel("Target")
    plt.ylabel("Jumlah")
    plt.show()
else:
    print("Kolom 'target' tidak ditemukan.")

# 11. Visualisasi distribusi fitur numerik
numerical_cols = df.select_dtypes(include=['int64', 'float64']).columns.tolist()
if 'target' in numerical_cols:
    numerical_cols.remove('target')

df[numerical_cols].hist(figsize=(15, 10), bins=15)
plt.tight_layout()
plt.show()

# 12. Rekayasa Fitur: Kelompok usia
df['age_group'] = pd.cut(df['age'], bins=[28, 40, 55, 80], labels=['Muda', 'Dewasa', 'Lansia'])

# 13. Bulatkan oldpeak jika ada
if 'oldpeak' in df.columns:
    df['oldpeak'] = df['oldpeak'].round()

# 14. Simpan versi cleaned
df.to_csv('heart_cleaned.csv', index=False)
print("\n✅ Dataset berhasil dibersihkan dan disimpan sebagai 'heart_cleaned.csv'")

# ================================================
# Tahap 2: Pemodelan dan Pembelajaran Mesin
# Project: Prediksi Penyakit Jantung
# ================================================

# 1. Import Library Tambahan
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

# 2. Pisahkan fitur (X) dan target (y)
X = df.drop(['condition', 'age_group'], axis=1)  # drop 'condition' and 'age_group'
y = df['condition'] # use 'condition' as the target variable

# 3. Split data: 80% train, 20% test
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 4. Normalisasi data (StandardScaler)
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# 5. Inisialisasi dan latih model Logistic Regression
model = LogisticRegression()
model.fit(X_train_scaled, y_train)

# 6. Prediksi
y_pred = model.predict(X_test_scaled)

# 7. Evaluasi model
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))
print("\nAkurasi:", accuracy_score(y_test, y_pred))

# ================================================
# Tahap 3: Validasi dan Evaluasi Model
# Project: Prediksi Penyakit Jantung
# ================================================

from sklearn.metrics import confusion_matrix, classification_report, accuracy_score, roc_curve, auc
import seaborn as sns
import matplotlib.pyplot as plt

# 1. Evaluasi dengan metrik dasar
print("=== Classification Report ===")
print(classification_report(y_test, y_pred))

print("=== Akurasi ===")
print(f"Akurasi: {accuracy_score(y_test, y_pred):.2f}")

# 2. Confusion Matrix
cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(6, 4))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
plt.xlabel("Prediksi")
plt.ylabel("Aktual")
plt.title("Confusion Matrix")
plt.show()

# 3. ROC Curve dan AUC (untuk evaluasi binary classification)
y_pred_prob = model.predict_proba(X_test_scaled)[:, 1]
fpr, tpr, thresholds = roc_curve(y_test, y_pred_prob)
roc_auc = auc(fpr, tpr)

plt.figure(figsize=(6, 4))
plt.plot(fpr, tpr, color='darkorange', lw=2, label=f'AUC = {roc_auc:.2f}')
plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curve')
plt.legend(loc="lower right")
plt.grid(True)
plt.show()

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import pandas as pd
# import numpy as np
# from sklearn.preprocessing import StandardScaler
# from sklearn.linear_model import LogisticRegression
# 
# # ============================================
# # 1. Dataset (Contoh data pelatihan mini)
# # ============================================
# # Data dummy (biasanya diganti dengan data asli)
# data = {
#     "age": [63, 67, 67, 37, 41, 56],
#     "sex": [1, 1, 1, 1, 0, 1],
#     "cp": [1, 4, 4, 3, 2, 2],
#     "trestbps": [145, 160, 120, 130, 130, 120],
#     "chol": [233, 286, 229, 250, 204, 236],
#     "fbs": [1, 0, 0, 0, 0, 0],
#     "restecg": [2, 2, 2, 0, 2, 0],
#     "thalach": [150, 108, 129, 187, 172, 178],
#     "exang": [0, 1, 1, 0, 0, 0],
#     "oldpeak": [2.3, 1.5, 2.6, 3.5, 1.4, 0.8],
#     "slope": [3, 2, 2, 3, 1, 1],
#     "ca": [0, 3, 2, 0, 0, 0],
#     "thal": [6, 3, 7, 3, 3, 3],
#     "target": [1, 0, 0, 1, 1, 1]
# }
# df = pd.DataFrame(data)
# 
# X = df.drop("target", axis=1)
# y = df["target"]
# 
# # ============================================
# # 2. Buat scaler dan model langsung
# # ============================================
# scaler = StandardScaler()
# X_scaled = scaler.fit_transform(X)
# 
# model = LogisticRegression()
# model.fit(X_scaled, y)
# 
# # ============================================
# # 3. Streamlit UI
# # ============================================
# st.title("💓 Prediksi Penyakit Jantung")
# 
# # Input user
# age = st.number_input("Umur", 20, 100, 50)
# sex = st.radio("Jenis Kelamin (Laki-laki=1, Perempuan=0)", [1, 0])
# cp = st.selectbox("Tipe Nyeri Dada (1–4)", [1, 2, 3, 4])
# trestbps = st.number_input("Tekanan Darah Istirahat", 80, 200, 120)
# chol = st.number_input("Kolesterol", 100, 400, 200)
# fbs = st.radio("Gula Darah > 120 mg/dl (Ya=1, Tidak=0)", [1, 0])
# restecg = st.selectbox("Hasil EKG (0–2)", [0, 1, 2])
# thalach = st.number_input("Detak Jantung Maksimum", 60, 220, 150)
# exang = st.radio("Angina yang Diinduksi Latihan (Ya=1, Tidak=0)", [1, 0])
# oldpeak = st.number_input("Oldpeak", 0.0, 6.0, 1.0)
# slope = st.selectbox("Slope ST (1–3)", [1, 2, 3])
# ca = st.selectbox("Jumlah Pembuluh yang Diwarnai (0–3)", [0, 1, 2, 3])
# thal = st.selectbox("Thal (3=normal, 6=fixed defect, 7=reversible defect)", [3, 6, 7])
# 
# # Tombol Prediksi
# if st.button("🔍 Prediksi"):
#     user_data = np.array([[age, sex, cp, trestbps, chol, fbs, restecg,
#                            thalach, exang, oldpeak, slope, ca, thal]])
#     user_data_scaled = scaler.transform(user_data)
#     prediction = model.predict(user_data_scaled)[0]
# 
#     if prediction == 1:
#         st.success("✅ Hasil: Kemungkinan memiliki penyakit jantung.")
#     else:
#         st.info("🫀 Hasil: Kemungkinan tidak memiliki penyakit jantung.")
#

!pip install streamlit pyngrok

!ngrok config add-authtoken 2zgBORAQssKwGevU1Mg0Oiq2Bin_3cU3M1xJtvQimoEH1cyNq

from pyngrok import ngrok

ngrok.kill()

import os
import time

# Stop tunnel if previously active. If this doesn't work, manually stop any rogue ngrok processes (your account is limited to one session).
ngrok.kill()

# Jalankan streamlit di background pada port 8501
os.system("streamlit run app.py --server.port 8511 &")

# Tunggu beberapa detik agar Streamlit siap
time.sleep(5)

# Buat tunnel ngrok ke port 8501
public_url = ngrok.connect(8511)

# Tampilkan URL untuk akses web app
print("🌐 Streamlit App tersedia di:", public_url)